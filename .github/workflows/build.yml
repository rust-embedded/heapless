name: Build
on:
  merge_group:
  pull_request:
    branches: [main]
  push:
    branches: [staging, trying]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  # Run MIRI tests on nightly
  # NOTE first because it takes the longest to complete
  testmiri:
    name: testmiri
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            - ~/.cargo/bin/
            - ~/.cargo/registry/index/
            - ~/.cargo/registry/cache/
            - ~/.cargo/git/db/
          key: ${{ runner.OS }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.OS }}-cargo-

      - name: Cache build output dependencies
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.OS }}-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.OS }}-build-

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: miri

      - name: Run miri
        run: MIRIFLAGS=-Zmiri-ignore-leaks cargo miri test

  # Run cargo test
  test:
    name: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            - ~/.cargo/bin/
            - ~/.cargo/registry/index/
            - ~/.cargo/registry/cache/
            - ~/.cargo/git/db/
          key: ${{ runner.OS }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.OS }}-cargo-

      - name: Cache build output dependencies
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.OS }}-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.OS }}-build-

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Run cargo test
        run: cargo test

  # Run cargo fmt --check
  style:
    name: style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt

      - name: cargo fmt --check
        run: cargo fmt --all -- --check

  clippy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
          targets: i686-unknown-linux-musl
      - run: cargo clippy --all --target i686-unknown-linux-musl --all-targets -- --deny warnings

  # Compilation check
  check:
    name: check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - i686-unknown-linux-musl
          - riscv32imc-unknown-none-elf
          - armv7r-none-eabi
          - thumbv6m-none-eabi
          - thumbv7m-none-eabi
          - thumbv8m.base-none-eabi
          - thumbv8m.main-none-eabi
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            - ~/.cargo/bin/
            - ~/.cargo/registry/index/
            - ~/.cargo/registry/cache/
            - ~/.cargo/git/db/
          key: ${{ runner.OS }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.OS }}-cargo-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.OS }}-cargo-

      - name: Cache build output dependencies
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.OS }}-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.OS }}-build-

      - name: Install Rust with target (${{ matrix.target }})
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: cargo check
        run: |
          cargo check --target=${{ matrix.target }}
          cargo check --target=${{ matrix.target }} --features="portable-atomic-critical-section"
          cargo check --target=${{ matrix.target }} --features="ufmt serde defmt-03 mpmc_large"

  doc:
    name: doc
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - thumbv7m-none-eabi
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            - ~/.cargo/bin/
            - ~/.cargo/registry/index/
            - ~/.cargo/registry/cache/
            - ~/.cargo/git/db/
          key: ${{ runner.OS }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.OS }}-cargo-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.OS }}-cargo-

      - name: Cache build output dependencies
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.OS }}-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.OS }}-build-

      - name: Install nightly Rust with target (${{ matrix.target }})
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.target }}

      - name: cargo rustdoc
        env: {"RUSTDOCFLAGS": "-D warnings --cfg docsrs"}
        run: cargo rustdoc --target=${{ matrix.target }} --features="ufmt serde defmt-03 mpmc_large portable-atomic-critical-section"

  # Run cpass tests
  testcpass:
    name: testcpass
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - i686-unknown-linux-musl
        buildtype:
          - ""
          - "--release"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            - ~/.cargo/bin/
            - ~/.cargo/registry/index/
            - ~/.cargo/registry/cache/
            - ~/.cargo/git/db/
          key: ${{ runner.OS }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.OS }}-cargo-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.OS }}-cargo-

      - name: Cache build output dependencies
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.OS }}-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.OS }}-build-

      - name: Install Rust with target (${{ matrix.target }})
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: cargo test
        run: cargo test --test cpass --target=${{ matrix.target }} --features=serde ${{ matrix.buildtype }}

  # Run test suite for UI
  testtsan:
    name: testtsan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
        buildtype:
          - ""
          - "--release"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            - ~/.cargo/bin/
            - ~/.cargo/registry/index/
            - ~/.cargo/registry/cache/
            - ~/.cargo/git/db/
          key: ${{ runner.OS }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.OS }}-cargo-

      - name: Cache build output dependencies
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.OS }}-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.OS }}-build-

      - name: Install Rust nightly with target (${{ matrix.target }})
        uses: dtolnay/rust-toolchain@nightly
        with:
          target: ${{ matrix.target }}
          components: rust-src

      - name: Export variables
        run: |
          echo RUSTFLAGS="-Z sanitizer=thread" >> $GITHUB_ENV
          echo TSAN_OPTIONS="suppressions=$(pwd)/suppressions.txt" >> $GITHUB_ENV
          echo $GITHUB_ENV

      - name: cargo test
        run: cargo test -Zbuild-std --test tsan --target=${{ matrix.target }} --features=${{ matrix.features }} ${{ matrix.buildtype }} -- --test-threads=1

  # Run cfail tests on MSRV
  testcfail:
    name: testcfail
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: cfail

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            - ~/.cargo/bin/
            - ~/.cargo/registry/index/
            - ~/.cargo/registry/cache/
            - ~/.cargo/git/db/
          key: ${{ runner.OS }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.OS }}-cargo-

      - name: Cache build output dependencies
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.OS }}-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.OS }}-build-

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Run cargo
        run: cargo test --test ui
