[package]
authors = [
  "Jorge Aparicio <jorge@japaric.io>",
  "Per Lindgren <per.lindgren@ltu.se>",
  "Emil Fresk <emil.fresk@gmail.com>",
]
categories = ["data-structures", "no-std"]
description = "`static` friendly data structures that don't require dynamic memory allocation"
documentation = "https://docs.rs/heapless"
edition = "2021"
keywords = ["static", "no-heap"]
license = "MIT OR Apache-2.0"
name = "heapless"
repository = "https://github.com/rust-embedded/heapless"
version = "0.9.0"

[features]
default = ["mpmc", "spsc"]

# Enable interoperability with `alloc` types.
alloc = []

bytes = ["dep:bytes"]

# Enable the `mpmc` module.
mpmc = ["portable-atomic?/require-cas"]
# Enable larger sizes for `mpmc::Queue`.
mpmc_large = []

# Enable the `spsc` module.
spsc = []

# Enable polyfilling of atomics via `portable-atomic`.
# `portable-atomic` polyfills some functionality by default, but to get full atomics you must
# enable one of its features to tell it how to do it. See `portable-atomic` documentation for details.
portable-atomic = ["dep:portable-atomic"]

# Enable polyfilling of atomics via portable-atomic, using critical section for locking
portable-atomic-critical-section = [
  "dep:portable-atomic",
  "portable-atomic",
  "portable-atomic?/critical-section",
]

# Enable polyfilling of atomics via portable-atomic, using disabling interrupts for locking.
# WARNING: this is only sound for single-core bare-metal privileged-mode targets!
portable-atomic-unsafe-assume-single-core = [
  "dep:portable-atomic",
  "portable-atomic",
  "portable-atomic?/unsafe-assume-single-core",
]

# Implement `serde` traits.
serde = ["dep:serde"]
# Implement `ufmt` traits.
ufmt = ["dep:ufmt", "dep:ufmt-write"]
# Implement `defmt` traits.
defmt = ["dep:defmt"]

nightly = []

[dependencies]
bytes = { version = "1", default-features = false, optional = true }
portable-atomic = { version = "1.3", optional = true }
hash32 = "0.3.0"
serde = { version = "1", optional = true, default-features = false }
ufmt = { version = "0.2", optional = true }
ufmt-write = { version = "0.1", optional = true }
defmt = { version = "1.0.1", optional = true }

# for the pool module
[target.'cfg(any(target_arch = "arm", target_pointer_width = "32", target_pointer_width = "64"))'.dependencies]
stable_deref_trait = { version = "1", default-features = false }

[dev-dependencies]
critical-section = { version = "1.1", features = ["std"] }
static_assertions = "1.1.0"

[package.metadata.docs.rs]
features = [
  "alloc",
  "bytes",
  "mpmc_large",
  "ufmt",
  "serde",
  "defmt",
  "portable-atomic-critical-section",
]
# for the pool module
targets = ["i686-unknown-linux-gnu"]
rustdoc-args = ["--cfg", "docsrs"]
